{"ast":null,"code":"import { UserActionManager } from \"./user-action-manager\";\nimport { withLatestFrom } from \"rxjs\";\nimport { EventType } from \"./models\";\nimport * as i0 from \"@angular/core\";\nexport class DrawDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.subscriptions = [];\n    this.activeEventType$.subscribe(eventType => {\n      eventType === EventType.PointerEvent ? this.addPointerEventListeners() : this.addTouchEventListeners();\n    });\n  }\n  addPointerEventListeners() {\n    this.unsubscribeAll(this.subscriptions);\n    this.subscriptions.push(UserActionManager.getPointerDownEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"pointerDown\", val);\n      this.setStartOrEndPoint(val.x, val.y, 'red');\n    }));\n    this.subscriptions.push(UserActionManager.getPointerMoveEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"pointerMove\", val);\n      this.drawOnCanvas(val.x, val.y, 'black');\n    }));\n    this.subscriptions.push(UserActionManager.getPointerUpEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"pointerUp\", val);\n      this.setStartOrEndPoint(val.x, val.y, 'pink');\n    }));\n  }\n  addTouchEventListeners() {\n    this.unsubscribeAll(this.subscriptions);\n    this.subscriptions.push(UserActionManager.getTouchStartEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"touchStart\", val);\n      this.setStartOrEndPoint(val.touches[0].clientX, val.touches[0].clientY, 'red');\n    }));\n    this.subscriptions.push(UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"touchMove\", val);\n      this.drawOnCanvas(val.touches[0].clientX, val.touches[0].clientY, 'black');\n    }));\n    this.subscriptions.push(UserActionManager.getTouchEndEvent(this.elementRef.nativeElement).pipe(withLatestFrom(UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement))).subscribe(([_, lastTouchMove]) => {\n      console.log(\"touchEnd\", lastTouchMove);\n      this.setStartOrEndPoint(lastTouchMove.touches[0].clientX, lastTouchMove.touches[0].clientY, 'pink');\n    }));\n  }\n  unsubscribeAll(subscriptions) {\n    subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  setStartOrEndPoint(x, y, color) {\n    this.elementRef.nativeElement.fillStyle = color;\n    this.elementRef.nativeElement.fillRect(x, y, 3, 3);\n    this.lastCoordinates = {\n      lastX: x,\n      lastY: y\n    };\n  }\n  drawOnCanvas(x, y, color) {\n    this.elementRef.nativeElement.beginPath();\n    this.elementRef.nativeElement.moveTo(this.lastCoordinates.lastX, this.lastCoordinates.lastY);\n    this.elementRef.nativeElement.lineTo(x, y);\n    this.elementRef.nativeElement.strokeStyle = '#000000';\n    this.elementRef.nativeElement.stroke();\n    this.lastCoordinates = {\n      lastX: x,\n      lastY: y\n    };\n  }\n  static #_ = this.ɵfac = function DrawDirective_Factory(t) {\n    return new (t || DrawDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DrawDirective,\n    selectors: [[\"\", \"draw\", \"\"]],\n    inputs: {\n      activeEventType$: \"activeEventType$\"\n    }\n  });\n}","map":{"version":3,"names":["UserActionManager","withLatestFrom","EventType","DrawDirective","constructor","elementRef","subscriptions","activeEventType$","subscribe","eventType","PointerEvent","addPointerEventListeners","addTouchEventListeners","unsubscribeAll","push","getPointerDownEvent","nativeElement","val","console","log","setStartOrEndPoint","x","y","getPointerMoveEvent","drawOnCanvas","getPointerUpEvent","getTouchStartEvent","touches","clientX","clientY","getTouchMoveEvent","getTouchEndEvent","pipe","_","lastTouchMove","forEach","sub","unsubscribe","color","fillStyle","fillRect","lastCoordinates","lastX","lastY","beginPath","moveTo","lineTo","strokeStyle","stroke","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","inputs"],"sources":["C:\\Workspace\\touchMove_delay\\src\\app\\draw.directive.ts"],"sourcesContent":["import {Directive, ElementRef, Input, OnInit} from \"@angular/core\";\r\nimport {UserActionManager} from \"./user-action-manager\";\r\nimport {Observable, Subscription, withLatestFrom} from \"rxjs\";\r\nimport {LastCoordinates} from \"./app.component\";\r\nimport {EventType} from \"./models\";\r\n\r\n@Directive({\r\n    selector: \"[draw]\"\r\n})\r\nexport class DrawDirective {\r\n\r\n    @Input()\r\n    public activeEventType$: Observable<EventType>;\r\n\r\n    private subscriptions: Subscription[] = [];\r\n    private lastCoordinates: LastCoordinates;\r\n\r\n    constructor(\r\n        private readonly elementRef: ElementRef\r\n    ) {\r\n        this.activeEventType$.subscribe((eventType: EventType) => {\r\n            eventType === EventType.PointerEvent\r\n                ? this.addPointerEventListeners()\r\n                : this.addTouchEventListeners();\r\n        })\r\n    }\r\n\r\n    private addPointerEventListeners() {\r\n        this.unsubscribeAll(this.subscriptions);\r\n        this.subscriptions.push(\r\n            UserActionManager.getPointerDownEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"pointerDown\", val);\r\n                    this.setStartOrEndPoint(val.x, val.y, 'red');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getPointerMoveEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"pointerMove\", val);\r\n                    this.drawOnCanvas(val.x, val.y, 'black');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getPointerUpEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"pointerUp\", val);\r\n                    this.setStartOrEndPoint(val.x, val.y, 'pink');\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    private addTouchEventListeners(): void {\r\n        this.unsubscribeAll(this.subscriptions);\r\n        this.subscriptions.push(\r\n            UserActionManager.getTouchStartEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"touchStart\", val);\r\n                    this.setStartOrEndPoint(val.touches[0].clientX, val.touches[0].clientY, 'red');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"touchMove\", val);\r\n                    this.drawOnCanvas(val.touches[0].clientX, val.touches[0].clientY, 'black');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getTouchEndEvent(this.elementRef.nativeElement).pipe(withLatestFrom(UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement))).subscribe(\r\n                ([_, lastTouchMove]) => {\r\n                    console.log(\"touchEnd\", lastTouchMove);\r\n                    this.setStartOrEndPoint(lastTouchMove.touches[0].clientX, lastTouchMove.touches[0].clientY, 'pink');\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    private unsubscribeAll(subscriptions: Subscription[]) {\r\n        subscriptions.forEach(sub => sub.unsubscribe())\r\n    }\r\n\r\n    private setStartOrEndPoint(x: number, y: number, color: string) {\r\n        this.elementRef.nativeElement.fillStyle = color;\r\n        this.elementRef.nativeElement.fillRect(x, y, 3, 3);\r\n        this.lastCoordinates = { lastX: x, lastY: y };\r\n    }\r\n\r\n    private drawOnCanvas(x: number, y: number, color: string) {\r\n        this.elementRef.nativeElement.beginPath();\r\n        this.elementRef.nativeElement.moveTo(\r\n            this.lastCoordinates.lastX,\r\n            this.lastCoordinates.lastY\r\n        );\r\n        this.elementRef.nativeElement.lineTo(x, y);\r\n        this.elementRef.nativeElement.strokeStyle = '#000000';\r\n        this.elementRef.nativeElement.stroke();\r\n\r\n        this.lastCoordinates = { lastX: x, lastY: y };\r\n    }\r\n}"],"mappings":"AACA,SAAQA,iBAAiB,QAAO,uBAAuB;AACvD,SAAkCC,cAAc,QAAO,MAAM;AAE7D,SAAQC,SAAS,QAAO,UAAU;;AAKlC,OAAM,MAAOC,aAAa;EAQtBC,YACqBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAJvB,KAAAC,aAAa,GAAmB,EAAE;IAMtC,IAAI,CAACC,gBAAgB,CAACC,SAAS,CAAEC,SAAoB,IAAI;MACrDA,SAAS,KAAKP,SAAS,CAACQ,YAAY,GAC9B,IAAI,CAACC,wBAAwB,EAAE,GAC/B,IAAI,CAACC,sBAAsB,EAAE;IACvC,CAAC,CAAC;EACN;EAEQD,wBAAwBA,CAAA;IAC5B,IAAI,CAACE,cAAc,CAAC,IAAI,CAACP,aAAa,CAAC;IACvC,IAAI,CAACA,aAAa,CAACQ,IAAI,CACnBd,iBAAiB,CAACe,mBAAmB,CAAC,IAAI,CAACV,UAAU,CAACW,aAAa,CAAC,CAACR,SAAS,CAC1ES,GAAG,IAAG;MACFC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,GAAG,CAAC;MAC/B,IAAI,CAACG,kBAAkB,CAACH,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACK,CAAC,EAAE,KAAK,CAAC;IAChD,CAAC,CACJ,CACJ;IAED,IAAI,CAAChB,aAAa,CAACQ,IAAI,CACnBd,iBAAiB,CAACuB,mBAAmB,CAAC,IAAI,CAAClB,UAAU,CAACW,aAAa,CAAC,CAACR,SAAS,CAC1ES,GAAG,IAAG;MACFC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,GAAG,CAAC;MAC/B,IAAI,CAACO,YAAY,CAACP,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACK,CAAC,EAAE,OAAO,CAAC;IAC5C,CAAC,CACJ,CACJ;IAED,IAAI,CAAChB,aAAa,CAACQ,IAAI,CACnBd,iBAAiB,CAACyB,iBAAiB,CAAC,IAAI,CAACpB,UAAU,CAACW,aAAa,CAAC,CAACR,SAAS,CACxES,GAAG,IAAG;MACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,GAAG,CAAC;MAC7B,IAAI,CAACG,kBAAkB,CAACH,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACK,CAAC,EAAE,MAAM,CAAC;IACjD,CAAC,CACJ,CACJ;EACL;EAEQV,sBAAsBA,CAAA;IAC1B,IAAI,CAACC,cAAc,CAAC,IAAI,CAACP,aAAa,CAAC;IACvC,IAAI,CAACA,aAAa,CAACQ,IAAI,CACnBd,iBAAiB,CAAC0B,kBAAkB,CAAC,IAAI,CAACrB,UAAU,CAACW,aAAa,CAAC,CAACR,SAAS,CACzES,GAAG,IAAG;MACFC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,GAAG,CAAC;MAC9B,IAAI,CAACG,kBAAkB,CAACH,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,EAAEX,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,EAAE,KAAK,CAAC;IAClF,CAAC,CACJ,CACJ;IAED,IAAI,CAACvB,aAAa,CAACQ,IAAI,CACnBd,iBAAiB,CAAC8B,iBAAiB,CAAC,IAAI,CAACzB,UAAU,CAACW,aAAa,CAAC,CAACR,SAAS,CACxES,GAAG,IAAG;MACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,GAAG,CAAC;MAC7B,IAAI,CAACO,YAAY,CAACP,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,EAAEX,GAAG,CAACU,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,EAAE,OAAO,CAAC;IAC9E,CAAC,CACJ,CACJ;IAED,IAAI,CAACvB,aAAa,CAACQ,IAAI,CACnBd,iBAAiB,CAAC+B,gBAAgB,CAAC,IAAI,CAAC1B,UAAU,CAACW,aAAa,CAAC,CAACgB,IAAI,CAAC/B,cAAc,CAACD,iBAAiB,CAAC8B,iBAAiB,CAAC,IAAI,CAACzB,UAAU,CAACW,aAAa,CAAC,CAAC,CAAC,CAACR,SAAS,CAChK,CAAC,CAACyB,CAAC,EAAEC,aAAa,CAAC,KAAI;MACnBhB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEe,aAAa,CAAC;MACtC,IAAI,CAACd,kBAAkB,CAACc,aAAa,CAACP,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,EAAEM,aAAa,CAACP,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO,EAAE,MAAM,CAAC;IACvG,CAAC,CACJ,CACJ;EACL;EAEQhB,cAAcA,CAACP,aAA6B;IAChDA,aAAa,CAAC6B,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACC,WAAW,EAAE,CAAC;EACnD;EAEQjB,kBAAkBA,CAACC,CAAS,EAAEC,CAAS,EAAEgB,KAAa;IAC1D,IAAI,CAACjC,UAAU,CAACW,aAAa,CAACuB,SAAS,GAAGD,KAAK;IAC/C,IAAI,CAACjC,UAAU,CAACW,aAAa,CAACwB,QAAQ,CAACnB,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD,IAAI,CAACmB,eAAe,GAAG;MAAEC,KAAK,EAAErB,CAAC;MAAEsB,KAAK,EAAErB;IAAC,CAAE;EACjD;EAEQE,YAAYA,CAACH,CAAS,EAAEC,CAAS,EAAEgB,KAAa;IACpD,IAAI,CAACjC,UAAU,CAACW,aAAa,CAAC4B,SAAS,EAAE;IACzC,IAAI,CAACvC,UAAU,CAACW,aAAa,CAAC6B,MAAM,CAChC,IAAI,CAACJ,eAAe,CAACC,KAAK,EAC1B,IAAI,CAACD,eAAe,CAACE,KAAK,CAC7B;IACD,IAAI,CAACtC,UAAU,CAACW,aAAa,CAAC8B,MAAM,CAACzB,CAAC,EAAEC,CAAC,CAAC;IAC1C,IAAI,CAACjB,UAAU,CAACW,aAAa,CAAC+B,WAAW,GAAG,SAAS;IACrD,IAAI,CAAC1C,UAAU,CAACW,aAAa,CAACgC,MAAM,EAAE;IAEtC,IAAI,CAACP,eAAe,GAAG;MAAEC,KAAK,EAAErB,CAAC;MAAEsB,KAAK,EAAErB;IAAC,CAAE;EACjD;EAAC,QAAAW,CAAA,G;qBAnGQ9B,aAAa,EAAA8C,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAbjD,aAAa;IAAAkD,SAAA;IAAAC,MAAA;MAAA/C,gBAAA;IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}