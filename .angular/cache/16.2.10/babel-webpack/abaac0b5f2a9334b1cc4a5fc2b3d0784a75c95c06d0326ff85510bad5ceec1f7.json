{"ast":null,"code":"import { UserActionManager } from \"./user-action-manager\";\nimport { withLatestFrom } from \"rxjs\";\nimport { EventType } from \"./models\";\nimport * as i0 from \"@angular/core\";\nexport class DrawDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.subscriptions = [];\n  }\n  ngAfterViewInit() {\n    this.activeEventType$.subscribe(eventType => {\n      console.log(\"type\");\n      eventType === EventType.PointerEvent ? this.addPointerEventListeners() : this.addTouchEventListeners();\n    });\n  }\n  addPointerEventListeners() {\n    this.unsubscribeAll(this.subscriptions);\n    this.subscriptions.push(UserActionManager.getPointerDownEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"pointerDown\", val);\n      this.setStartOrEndPoint(val.x, val.y, 'red');\n    }));\n    this.subscriptions.push(UserActionManager.getPointerMoveEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"pointerMove\", val);\n      this.drawOnCanvas(val.x, val.y, 'black');\n    }));\n    this.subscriptions.push(UserActionManager.getPointerUpEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"pointerUp\", val);\n      this.setStartOrEndPoint(val.x, val.y, 'pink');\n    }));\n  }\n  addTouchEventListeners() {\n    this.unsubscribeAll(this.subscriptions);\n    this.subscriptions.push(UserActionManager.getTouchStartEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"touchStart\", val);\n      this.setStartOrEndPoint(val.touches[0].clientX, val.touches[0].clientY, 'red');\n    }));\n    this.subscriptions.push(UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement).subscribe(val => {\n      console.log(\"touchMove\", val);\n      this.drawOnCanvas(val.touches[0].clientX, val.touches[0].clientY, 'black');\n    }));\n    this.subscriptions.push(UserActionManager.getTouchEndEvent(this.elementRef.nativeElement).pipe(withLatestFrom(UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement))).subscribe(([_, lastTouchMove]) => {\n      console.log(\"touchEnd\", lastTouchMove);\n      this.setStartOrEndPoint(lastTouchMove.touches[0].clientX, lastTouchMove.touches[0].clientY, 'pink');\n    }));\n  }\n  unsubscribeAll(subscriptions) {\n    subscriptions.forEach(sub => sub.unsubscribe());\n  }\n  setStartOrEndPoint(x, y, color) {\n    this.elementRef.nativeElement.fillStyle = color;\n    this.elementRef.nativeElement.fillRect(x, y, 3, 3);\n    this.lastCoordinates = {\n      lastX: x,\n      lastY: y\n    };\n  }\n  drawOnCanvas(x, y, color) {\n    this.elementRef.nativeElement.beginPath();\n    this.elementRef.nativeElement.moveTo(this.lastCoordinates.lastX, this.lastCoordinates.lastY);\n    this.elementRef.nativeElement.lineTo(x, y);\n    this.elementRef.nativeElement.strokeStyle = '#000000';\n    this.elementRef.nativeElement.stroke();\n    this.lastCoordinates = {\n      lastX: x,\n      lastY: y\n    };\n  }\n  static #_ = this.ɵfac = function DrawDirective_Factory(t) {\n    return new (t || DrawDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DrawDirective,\n    selectors: [[\"\", \"draw\", \"\"]],\n    inputs: {\n      activeEventType$: \"activeEventType$\"\n    }\n  });\n}","map":{"version":3,"names":["UserActionManager","withLatestFrom","EventType","DrawDirective","constructor","elementRef","subscriptions","ngAfterViewInit","activeEventType$","subscribe","eventType","console","log","PointerEvent","addPointerEventListeners","addTouchEventListeners","unsubscribeAll","push","getPointerDownEvent","nativeElement","val","setStartOrEndPoint","x","y","getPointerMoveEvent","drawOnCanvas","getPointerUpEvent","getTouchStartEvent","touches","clientX","clientY","getTouchMoveEvent","getTouchEndEvent","pipe","_","lastTouchMove","forEach","sub","unsubscribe","color","fillStyle","fillRect","lastCoordinates","lastX","lastY","beginPath","moveTo","lineTo","strokeStyle","stroke","i0","ɵɵdirectiveInject","ElementRef","_2","selectors","inputs"],"sources":["C:\\Workspace\\touchMove_delay\\src\\app\\draw.directive.ts"],"sourcesContent":["import {AfterViewInit, Directive, ElementRef, Input, OnInit} from \"@angular/core\";\r\nimport {UserActionManager} from \"./user-action-manager\";\r\nimport {filter, Observable, Subscription, withLatestFrom} from \"rxjs\";\r\nimport {LastCoordinates} from \"./app.component\";\r\nimport {EventType} from \"./models\";\r\n\r\n@Directive({\r\n    selector: \"[draw]\"\r\n})\r\nexport class DrawDirective implements AfterViewInit {\r\n\r\n    @Input()\r\n    public activeEventType$: Observable<EventType>;\r\n\r\n    private subscriptions: Subscription[] = [];\r\n    private lastCoordinates: LastCoordinates;\r\n\r\n    constructor(\r\n        private readonly elementRef: ElementRef\r\n    ) {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.activeEventType$.subscribe((eventType: EventType) => {\r\n            console.log(\"type\")\r\n            eventType === EventType.PointerEvent\r\n                ? this.addPointerEventListeners()\r\n                : this.addTouchEventListeners();\r\n        })\r\n    }\r\n\r\n    private addPointerEventListeners() {\r\n        this.unsubscribeAll(this.subscriptions);\r\n        this.subscriptions.push(\r\n            UserActionManager.getPointerDownEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"pointerDown\", val);\r\n                    this.setStartOrEndPoint(val.x, val.y, 'red');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getPointerMoveEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"pointerMove\", val);\r\n                    this.drawOnCanvas(val.x, val.y, 'black');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getPointerUpEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"pointerUp\", val);\r\n                    this.setStartOrEndPoint(val.x, val.y, 'pink');\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    private addTouchEventListeners(): void {\r\n        this.unsubscribeAll(this.subscriptions);\r\n        this.subscriptions.push(\r\n            UserActionManager.getTouchStartEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"touchStart\", val);\r\n                    this.setStartOrEndPoint(val.touches[0].clientX, val.touches[0].clientY, 'red');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement).subscribe(\r\n                val => {\r\n                    console.log(\"touchMove\", val);\r\n                    this.drawOnCanvas(val.touches[0].clientX, val.touches[0].clientY, 'black');\r\n                }\r\n            )\r\n        )\r\n\r\n        this.subscriptions.push(\r\n            UserActionManager.getTouchEndEvent(this.elementRef.nativeElement).pipe(withLatestFrom(UserActionManager.getTouchMoveEvent(this.elementRef.nativeElement))).subscribe(\r\n                ([_, lastTouchMove]) => {\r\n                    console.log(\"touchEnd\", lastTouchMove);\r\n                    this.setStartOrEndPoint(lastTouchMove.touches[0].clientX, lastTouchMove.touches[0].clientY, 'pink');\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    private unsubscribeAll(subscriptions: Subscription[]) {\r\n        subscriptions.forEach(sub => sub.unsubscribe())\r\n    }\r\n\r\n    private setStartOrEndPoint(x: number, y: number, color: string) {\r\n        this.elementRef.nativeElement.fillStyle = color;\r\n        this.elementRef.nativeElement.fillRect(x, y, 3, 3);\r\n        this.lastCoordinates = { lastX: x, lastY: y };\r\n    }\r\n\r\n    private drawOnCanvas(x: number, y: number, color: string) {\r\n        this.elementRef.nativeElement.beginPath();\r\n        this.elementRef.nativeElement.moveTo(\r\n            this.lastCoordinates.lastX,\r\n            this.lastCoordinates.lastY\r\n        );\r\n        this.elementRef.nativeElement.lineTo(x, y);\r\n        this.elementRef.nativeElement.strokeStyle = '#000000';\r\n        this.elementRef.nativeElement.stroke();\r\n\r\n        this.lastCoordinates = { lastX: x, lastY: y };\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}